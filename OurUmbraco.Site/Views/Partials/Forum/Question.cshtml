@inherits Umbraco.Web.Mvc.UmbracoViewPage<uForum.Models.Topic>
@using uForum;

@{
    var topicAuthor = Members.GetById(Model.MemberId);
    var forum = Umbraco.TypedContent(Model.ParentId);
    var roles = Roles.GetRolesForUser(topicAuthor.GetPropertyValue<string>("UserName"));
}

<li class="comment question" id="comment-@Model.Id" data-deepLink="@Model.Title" data-version="@Model.Version" data-cat="@Model.ParentId">
    <!-- Start of question -->
    <div class="meta">
        <div class="profile">
            <a href="/member/@topicAuthor.Id">@topicAuthor.Name</a> <span class="hide-xs">has in total, </span>@topicAuthor.Karma() karma points

            @if (roles.Length > 1)
            {
                <span class="roles">
                    @foreach (var role in roles.Skip(1))
                    {
                        if (role == "CoreContrib")
                        {
                            <span class="c-trib">C-trib</span>
                        }
                        else
                        {
                            <span class="@role.ToLower()">@role</span>
                        }
                    }
                </span>
            }
        </div>

        <div class="time">
            @Model.Created.ConvertToRelativeTime()
        </div>
    </div>

    <div class="comment-inner">
        <a href="/member/@topicAuthor.Id" class="photo">
            @avatar(topicAuthor, 48)
            <span class="karma">Recieved @topicAuthor.Karma() <br>Karma points</span>
        </a>
        <div class="body-meta">
            <div class="topic">
                <h2>@Model.Title</h2>
            </div>
            <div class="categories">
                <div class="category core">
                    <a href="@forum.Url">@forum.Name</a>
                </div>

                @if (Model.Version > 0)
                {
                    <div class="version">
                        <a href="#">Umbraco @Model.Version</a>
                    </div>
                }
            </div>
        </div>

        <div class="body">

            @if (Model.IsSpam) { 
            <div class="alert">
                Sorry if we're causing you any inconvenience but this topic has been automatically marked as spam. A moderator has been notified and will evaluate the validity of your topic. When this topic has been marked as clean, this topic will be shown as normal.
                <br/><br/>
                You can see this topic because you're a moderator of the forum. Only moderators and the topic starter can see this topic.
            </div>
            }
            
            @Model.Body.Sanitize()
        </div>
    </div>

    <div class="actions">
        <a href="#" class="copy-link" data-id="#comment-@Model.Id">
            <i class="icon-Link"></i><span>Copy Link</span>
        </a>

        @if (Members.IsLoggedIn()){
        <a href="#" data-author="@topicAuthor.Name" data-topic="@Model.Id" data-controller="comment" class="reply forum-reply">
            <i class="icon-Reply-arrow"></i><span>Reply</span>
        </a>

        if (Members.IsAdmin()) { 
            if (Model.IsSpam) { 
            
                <a href="#" class="mark-as-ham" data-id="@Model.Id" data-controller="topic">
                    <i class="icon-Alert-alt"></i><span>Mark as ham</span>
                </a>

            }
            else
            {
                <a href="#" class="mark-as-spam" data-id="@Model.Id" data-controller="topic">
                    <i class="icon-Alert-alt"></i><span>Mark as spam</span>
                </a>
            }
        }

        if (Members.GetCurrentMember().Id == topicAuthor.Id)
        {
            <a href="#" class="edit-post" data-id="@Model.Id" data-controller="topic">
                <i class="icon-Edit"></i><span>Edit post</span>
            </a>
        }
        
        }
    </div>
</li> <!-- End of question -->
@helper avatar(IPublishedContent member, int avatarSize)
{
    if (member.HasValue("avatar"))
    {
        @localAvatar(member.GetPropertyValue("avatar").ToString(), avatarSize);
    }
    else
    {
        @gravatar(member.GetPropertyValue("Email").ToString(), avatarSize);
    }
}


@helper gravatar(string email, int size)
{
    var emailId = email.ToLower();
    var hash = FormsAuthentication.HashPasswordForStoringInConfigFile(emailId, "MD5").ToLower();
    
    <img src="//www.gravatar.com/avatar/@hash?s=@size&d=mm&r=g&d=retro" />
}

@helper localAvatar(string imgPath, int size)
{   
    <img src="@imgPath?width=@size&height=@size" alt="Alternate Text" />
}