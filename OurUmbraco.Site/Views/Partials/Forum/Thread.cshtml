@model ReadOnlyTopic
@using System.Web.Mvc.Html
@using OurUmbraco.Forum.Models
@using Umbraco.Core.Logging

<!-- COPY LINK -->
<div id="overlay" class="overlay"></div>

<div id="copy-link-wrapper" class="copy-link-wrapper">
    <i class="icon-Link"></i>
    <textarea class="getLink" readonly type="text"></textarea>
    <p>Press Ctrl / CMD + C to copy this to your clipboard.</p>
</div>

<div id="thankyou">
    Copied to clipboard
</div>
<!-- COPY LINK END -->
<!-- DELETE THREAD/COMMENT START -->
@if (Model.MemberData != null)
{
    <div id="confirm-wrapper" class="confirm-wrapper">
        <h4>Are you sure?</h4>
        <p>This <span class="type-of"></span> will be gone forever and ever</p>
        <br />
        <button type="button" class="button green tiny">Yes</button>
        <button type="button" class="button red tiny">No</button>
    </div>
}

<!-- DELETE THREAD END -->
<!-- FLAG SPAM START -->
<div id="confirm-wrapper-flag" class="confirm-wrapper-flag">
    <h4>Flag this post as spam?</h4>
    <p>This post will be reported to the moderators as potential spam to be looked at</p>
    <br />
    <button type="button" class="button green tiny">Yes</button>
    <button type="button" class="button red tiny">No</button>
</div>
<!-- FLAG SPAM END -->

@if (Model.ForumNewTopicsAllowed == false)
{
    <div class="alertbar__yellow" style="margin-bottom: 10px;">
        @Html.Raw(Model.MainNotification)
    </div>
}

<ul class="comments">
    @{
        try
        {
            @Html.Partial("forum/question", Model)
        }
        catch (Exception ex)
        {
            LogHelper.Error<string>(string.Format("~/Views/MacroPartials/Forum/Thread.cshtml - error rendering topic with id {0}", Model.Id), ex);
        }
    }

    @foreach (var comment in Model.Comments.Where(x => x.ParentCommentId == 0))
    {
        Html.RenderPartial("forum/comment", comment);

        if (comment.HasChildren)
        {
            foreach (var child in Model.Comments.Where(c => c.ParentCommentId == comment.Id))
            {
                Html.RenderPartial("forum/comment", child);
            }
        }
    }

    <!-- signalR reply notification -->
    <li class="comment" id="reply-is-coming" style="background: rgba(222, 253, 254, 0.5); display: none;">
        <div class="meta">
        </div>
        <div class="comment-inner">
            <a class="photo" href=""><img src=""></a>

            <div class="body markdown-syntax">
                <div class="typing-indicator">
                    <span></span>
                    <span></span>
                    <span></span>
                </div>
                <p style="text-align:center">
                    <span class="author"></span> is working on a reply...
                </p>
            </div>
        </div>
    </li>
</ul>

@if (Model.MemberData != null)
{
    if (Model.ForumNewTopicsAllowed)
    {
        <div class="replybutton">
            <a href="#" class="button green large reply forum-reply" data-author="@Model.AuthorName" data-topic="@Model.Id" data-controller="comment"><i class="icon-Reply-arrow"></i>&nbsp;Reply to topic</a>
        </div>

        <div class="utilities">
            <div class="utility-actions thread-bottom">
                @if (Model.MemberData.IsAdmin)
                {
                    <a href="#" class="delete-thread button" data-id="@Model.Id">
                        <i class="icon-Delete-key"></i><span>Delete thread</span>
                    </a>
                }

                <a href="#" class="follow button @(Model.Subscribed ? "following" : "transparent")" data-id="@Model.Id" data-controller="topic">
                    <i class="icon-Bookmark"></i><span>@(Model.Subscribed ? "Following" : "Follow")</span>
                </a>

                @if (Model.Answer > 0)
                {
                    <a href="#comment-@Model.Answer.ToString()" class="go-to-solution button transparent">
                        <i class="icon-Check"></i><span>Go to solution</span>
                    </a>
                }
            </div>
        </div>
    }
    else
    {
        <div class="alertbar__yellow">
            @Html.Raw(Model.MainNotification)
        </div>
    }
}
else
{
    <div class="replybutton notloggedin">
        Please <a href="/member/login?redirectUrl=@(Server.UrlEncode(Request.Url.AbsoluteUri))">Sign in</a> or <a href="/member/signup">register</a> to post replies
    </div>
}

<!-- SignalR Stuff Starts-->
<script src="http://ajax.aspnetcdn.com/ajax/signalr/jquery.signalr-2.2.2.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/pnotify/3.2.0/pnotify.js"></script>
<link href="https://cdnjs.cloudflare.com/ajax/libs/pnotify/3.2.0/pnotify.css" rel="stylesheet" type="text/css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/pnotify/3.2.0/pnotify.brighttheme.css" rel="stylesheet" type="text/css" />

<script src="~/signalr/hubs"></script>
<script>
    var isLoggedIn = '@(Model.MemberData != null)' == "True" ? true : false;
    var memberId = @(Model.MemberData != null ? Model.MemberData.Member.Id : 0);
    var memberName = '@(Model.MemberData != null ? Model.MemberData.Member.Name : string.Empty)';
    var lastActivity = null;

    // if it's been long since last activity, we'll remove the "working on reply" box
    function checkActivity() {
        var timeDiff = _.now() - lastActivity;
        if (timeDiff > 60000) {
            $('#reply-is-coming').fadeOut();
        } else {
            setTimeout(checkActivity, 5000);
        }
    }

    $(function() {
        var forum = $.connection.forumPostHub;

        forum.client.someoneIsTyping = function(id, memberId, name) {
            if (id !== @Model.Id) {
                return;
        }

        // update the date
        lastActivity = _.now();

        var replyPlaceholder = $('#reply-is-coming');

        // update meta data
        replyPlaceholder.find('.author').text(name);
        $.ajax({
            url: '/umbraco/api/Avatar/GetMemberAvatar/?memberId=' + memberId,
            type: "GET"
        }).done(function(avatarData) {
            replyPlaceholder.find('.photo').attr('href', '/member/' + memberId);
            replyPlaceholder.find('img').replaceWith(avatarData);
        });

        if (!replyPlaceholder.is(":visible")) {
            replyPlaceholder.fadeIn(1000);
            checkActivity();
        }
    };

    forum.client.DeleteComment = function(threadId, commentId) {
        if (threadId !== @Model.Id) {
            return;
    }
    var containerId = "#comment-" + commentId;
    $(containerId).fadeOut(1000, function() { $(this).remove(); });
    };

    forum.client.returnLatestComment = function(data) {
        if (data.topicId !== @Model.Id) {
            return;
    }
    var avatarUrl = '/umbraco/api/Avatar/GetMemberAvatar/?memberId=' + data.authorId;
    $.ajax({
        url: avatarUrl,
        type: "GET"
    }).done(function(avatarData) {
        data.avatar = avatarData;

        //new comment we'll use mustache to insert it into the dom
        data.lower = function() {
            return function(text, render) {
                return render(text).toLowerCase();
            }
        };

        // hide reply in progress
        $('#reply-is-coming').fadeOut();

        data.canHaveChildren = true;
        data.isLoggedIn = isLoggedIn;
        data.isCommentOwner = data.authorId == memberId;
        var template = $('#comment-template').html();
        var rendered = Mustache.render(template, data);

        if (data.parent == 0) {
            $(".comments").append(rendered);

            $("div.replybutton").insertAfter($("#comment-" + data.id));
        } else {
            var allComments = $("li[data-parent='" + data.parent + "']");
            debugger;
            if (allComments.length > 0) {
                var lastComment;
                for (var i = 0; i < allComments.length; i++) {
                    lastComment = allComments[i];
                }
                $(lastComment).after(rendered);
            } else {
                $("#comment-" + data.parent).after(rendered);
            }
        }
        var notify = new PNotify({
            title: 'New answer was added',
            text: 'Jump to new answer',
            type: 'success'
        });
        $('#comment-' + data.id).css('background', 'rgba(14, 216, 61, 0.31)').fadeIn(200);
        notify.get().css('cursor', 'pointer').click(function(e) {
            $(document).scrollTop($("#comment-" + data.id).offset().top - 80);
            $("#comment-" + data.id).hide();
            $("#comment-" + data.id).fadeIn();

        });
    });
    };

    forum.client.returnEditedComment = function(data) {
        if (data.topicId !== @Model.Id) {
            return;
    }
    var container = $('#comment-' + data.id + ' .body');
    container.html(data.body);
    var notify = new PNotify({
        title: 'Post was edited',
        text: 'Jump to modified answer',
    });
    $('#comment-' + data.id).css('background', 'rgba(216, 209, 14, 0.31)').fadeIn(200);
    notify.get().css('cursor', 'pointer').click(function(e) {
        $(document).scrollTop($("#comment-" + data.id).offset().top - 80);
        $("#comment-" + data.id).hide();
        $("#comment-" + data.id).fadeIn();

    });

    }

    forum.client.notify = function() {
        if ($('#wmd-input').val().length > 50) {
            forum.server.someoneIsTyping(@Model.Id, memberId, memberName);
        }

    }
    // Start the connection.
    $.connection.hub.start().done(function () {
        $('#wmd-input').bind('input propertychange', notifyChange);
    });

    var notifyChange = _.debounce(forum.client.notify, 500, {leading:true, trailing:false});

    });
</script>
<!-- End of SignalR-->